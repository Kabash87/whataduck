{"version":3,"file":"static/js/424.570c9154.chunk.js","mappings":"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","sources":["api/client.js","components/recovery/Recovery.js","components/recovery/service.js"],"sourcesContent":["import axios from \"axios\";\n\naxios.defaults.withCredentials = true;\n/**\n * creacion del cliente de axios para llamar al backend\n */\nconst client = axios.create({\n  baseURL: process.env.REACT_APP_API_BASE_URL,\n});\n\n//interceptor para que solo recoja el campo .data de la respuesta\nclient.interceptors.response.use((response) => {\n  if (response.data && response.data.results) {\n    return response.data.results;\n  }\n  return response.data;\n});\n\nexport default client;","import React, { useState } from \"react\";\r\nimport {\r\n  Form,\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Alert,\r\n  Modal,\r\n} from \"react-bootstrap\";\r\nimport { recoveryPass } from \"./service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Recovery() {\r\n  const [email, setEmail] = useState(\"\");\r\n\r\n  // Estado para almacenar el mensaje de éxito\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n  // Estado para almacenar el mensaje de error\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // Estado para almacenar mensajes de error de validacion\r\n  const [formErrors, setFormErrors] = useState({});\r\n\r\n  // Estado para controlar la visibilidad del Modal\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    // Comprobaciones para cada campo requerido\r\n    if (!email) {\r\n      errors.price = \"El correo electronico es obligatorio\";\r\n    }\r\n    // Actualiza el estado de los errores de validación\r\n    setFormErrors(errors);\r\n\r\n    // Devuelve true si no hay errores, de lo contrario, devuelve false\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Realiza la validación del formulario antes de enviar la solicitud\r\n    if (validateForm()) {\r\n      // Mostrar el Modal de confirmación\r\n      setShowModal(true);\r\n    }\r\n  };\r\n\r\n  const handleConfirm = async () => {\r\n    // Cerrar el Modal de confirmación\r\n    setShowModal(false);\r\n\r\n    const newPass = {\r\n      email: email,\r\n    };\r\n    console.log(\"Datos a enviar al servidor:\", newPass);\r\n\r\n    // Realizar la petición POST al backend\r\n    try {\r\n      await recoveryPass(newPass); // Llama a la función de la API\r\n      setSuccessMessage(\r\n        \"Se ha enviado un correo de recuperacion para cambiar la contraseña de la cuenta\"\r\n      );\r\n      setErrorMessage(\"\");\r\n      setEmail(\"\");\r\n    } catch (error) {\r\n      // Si ocurre un error, establecer el mensaje de error y limpiar el mensaje de éxito\r\n      setErrorMessage(\r\n        \"No se ha encontrado el correo dentro de la Base de Datos.\"\r\n      );\r\n      setSuccessMessage(\"\");\r\n    }\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Cerrar el Modal de confirmación sin hacer ninguna acción\r\n    setShowModal(false);\r\n  };\r\n\r\n  // Lógica para manejar el envío del formulario y crear el anuncio\r\n\r\n  return (\r\n    <Container>\r\n      <br />\r\n      <br />\r\n      <Row className=\"justify-content-md-center\">\r\n        <Col md=\"6\">\r\n          {/*Modal de confirmación */}\r\n          <Modal show={showModal} onHide={handleCancel}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Confirmar</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n              ¿Estás seguro de que deseas cambiar tu contraseña?\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleCancel}>\r\n                Cancelar\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={handleConfirm}>\r\n                Aceptar\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n\r\n          {/*Alert para mostrar el mensaje de éxito */}\r\n          {successMessage && <Alert variant=\"success\">{successMessage}</Alert>}\r\n          {/*Alert para mostrar el mensaje de error */}\r\n          {errorMessage && <Alert variant=\"danger\">{errorMessage}</Alert>}\r\n          <Form\r\n            onSubmit={handleSubmit}\r\n            encType=\"multipart/form-data\"\r\n            style={{\r\n              padding: \"30px\",\r\n              width: \"700px\",\r\n              borderRadius: \"30px\",\r\n              backgroundColor: \"#46278A\",\r\n              color: \"#FFFFFF \",\r\n              position: \"absolute\",\r\n              top: \"25%\",\r\n              left: \"25%\",\r\n            }}\r\n          >\r\n            <br />\r\n            <h2>Recuperar contraseña</h2>\r\n            <p>\r\n              Ingresa el correo electronico con que creaste tu cuenta y te\r\n              enviaremos un enlace para recuperar tu contraseña{\" \"}\r\n            </p>\r\n            <br />\r\n\r\n            <Form.Group controlId=\"formEmail\">\r\n              <Form.Label>Correo Electronico:</Form.Label>\r\n              <Form.Control\r\n                type=\"email\"\r\n                placeholder=\"Ingresa tu correo electronico\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              {formErrors.email && (\r\n                <Form.Text className=\"text-danger\">\r\n                  {formErrors.email}\r\n                </Form.Text>\r\n              )}\r\n            </Form.Group>\r\n            <br />\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Enviar correo\r\n            </Button>\r\n            <br />\r\n            <br />\r\n            <p>\r\n              ¿Estas perdido?{\" \"}\r\n              <Link to=\"/\" style={{ textDecoration: \"none\" }}>\r\n                Volver al Inicio\r\n              </Link>\r\n            </p>\r\n          </Form>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Recovery;\r\n","import client from \"../../api/client\";\n\n/**\n * llamada al endpoint de la API para obtener el listado de anuncios\n */\n\nconst recoveryUrl = \"/api/users\";\n\nexport const recoveryPass = (newPass) => {\n  return client.post(`${recoveryUrl}/recovery`, newPass, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n\n//Cambio de contraseña definitivo\nexport const recoveryPass2 = (newPass2) => {\n  return client.post(`${recoveryUrl}/change-password`, newPass2, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n};\n"],"names":["axios","defaults","withCredentials","client","create","baseURL","process","interceptors","response","use","data","results","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","successMessage","setSuccessMessage","_useState5","_useState6","errorMessage","setErrorMessage","_useState7","_useState8","formErrors","setFormErrors","_useState9","_useState10","showModal","setShowModal","handleConfirm","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newPass","wrap","_context","prev","next","console","log","recoveryPass","t0","stop","apply","arguments","handleCancel","_jsxs","Container","children","_jsx","Row","className","Col","md","Modal","show","onHide","Header","closeButton","Title","Body","Footer","Button","variant","onClick","Alert","Form","onSubmit","e","preventDefault","errors","price","Object","keys","length","validateForm","encType","style","padding","width","borderRadius","backgroundColor","color","position","top","left","Group","controlId","Label","Control","type","placeholder","value","onChange","target","Text","Link","to","textDecoration","recoveryUrl","post","concat","headers","recoveryPass2","newPass2"],"sourceRoot":""}