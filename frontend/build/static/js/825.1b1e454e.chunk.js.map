{"version":3,"file":"static/js/825.1b1e454e.chunk.js","mappings":"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","sources":["components/auth/LoginForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, Button, Container, Row, Col, Alert } from \"react-bootstrap\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { Login } from \"./service\";\r\nimport Layout from \"../Layout/Layout\";\r\nimport { useAuth } from \"../auth/AuthContext\"\r\n\r\nfunction LoginForm() {\r\n  const { setIsLogged } = useAuth();\r\n  const navigate = useNavigate();\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  // Estado para almacenar el mensaje de éxito\r\n  const [successMessage, setSuccessMessage] = useState(\"\");\r\n\r\n  // Estado para almacenar el mensaje de error\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  // Estado para almacenar mensajes de error de validacion\r\n  const [formErrors, setFormErrors] = useState({});\r\n\r\n  const validateForm = () => {\r\n    const errors = {};\r\n    // Comprobaciones para cada campo requerido\r\n    if (!email) {\r\n      errors.email = \"El correo es obligatorio\";\r\n    }\r\n    if (!password) {\r\n      errors.password = \"La contraseña es obligatorio\";\r\n    }\r\n\r\n    // Actualiza el estado de los errores de validación\r\n    setFormErrors(errors);\r\n\r\n    // Devuelve true si no hay errores, de lo contrario, devuelve false\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    // Realiza la validación del formulario antes de enviar la solicitud\r\n    if (validateForm()) {\r\n      const loginForm = {\r\n        email: email,\r\n        password: password,\r\n      };\r\n\r\n      // Realizar la petición POST al backend\r\n      try {\r\n        const response = await Login(loginForm); // Llama a la función de la API\r\n\r\n         // Si el servidor devuelve un token y userId, emailToken sirve para verificar la cuenta\r\n          localStorage.setItem('token', response.token);\r\n          localStorage.setItem('userId', response.userId);\r\n          localStorage.setItem('isVerified', response.veri)\r\n          localStorage.setItem('emailToken', response.emailToken)\r\n          setIsLogged(true);\r\n      \r\n\r\n        setSuccessMessage(\"Login hecho con éxito, bienvenido de vuelta\");\r\n        setErrorMessage(\"\");\r\n        setEmail(\"\");\r\n        setPassword(\"\");\r\n        navigate('/adverts');\r\n      } catch (error) {\r\n        // Si ocurre un error, establecer el mensaje de error y limpiar el mensaje de éxito\r\n        setErrorMessage(\r\n          \"Error al iniciar sesion. Por favor, inténtalo de nuevo.\"\r\n        );\r\n        setSuccessMessage(\"\");\r\n      }\r\n    }\r\n  };\r\n\r\n  // Lógica para manejar el envío del formulario y crear el anuncio\r\n\r\n  return (\r\n    <Layout title=\"Login\">\r\n      <Container>\r\n        <Row className=\"justify-content-md-center\">\r\n          <Col md=\"6\">\r\n            {/*Alert para mostrar el mensaje de éxito */}\r\n            {successMessage && (\r\n              <Alert variant=\"success\">{successMessage}</Alert>\r\n            )}\r\n            {/*Alert para mostrar el mensaje de error */}\r\n            {errorMessage && <Alert variant=\"danger\">{errorMessage}</Alert>}\r\n            <Form onSubmit={handleSubmit} encType=\"multipart/form-data\">\r\n              <br />\r\n              <h2>Iniciar Sesion</h2>\r\n              <p>No te pierdas de todas las cosas nuevas que tenemos para ti</p>\r\n              <br />\r\n              <Form.Group controlId=\"formName\">\r\n                <Form.Label>Correo Electronico:</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  placeholder=\"Ingresa tu correo electronico...\"\r\n                  value={email}\r\n                  onChange={(e) => setEmail(e.target.value)}\r\n                />\r\n                {formErrors.email && (\r\n                  <Form.Text className=\"text-danger\">\r\n                    {formErrors.email}\r\n                  </Form.Text>\r\n                )}\r\n              </Form.Group>\r\n              <Form.Group controlId=\"formPrice\">\r\n                <Form.Label>Contraseña: </Form.Label>\r\n                <Form.Control\r\n                  type=\"password\"\r\n                  placeholder=\"Ingresa tu contraseña...\"\r\n                  value={password}\r\n                  onChange={(e) => setPassword(e.target.value)}\r\n                />\r\n                {formErrors.password && (\r\n                  <Form.Text className=\"text-danger\">\r\n                    {formErrors.password}\r\n                  </Form.Text>\r\n                )}\r\n              </Form.Group>\r\n              <br />\r\n              <Button variant=\"primary\" type=\"submit\">\r\n                Iniciar Sesión\r\n              </Button>\r\n              <br />\r\n              <br />\r\n              <p>\r\n                ¿No tienes una cuenta creada?{\" \"}\r\n                <Link to=\"/register\" style={{ textDecoration: \"none\" }}>\r\n                  Registrate aquí\r\n                </Link>\r\n              </p>\r\n              <p>\r\n                ¿Olvidastes tu contraseña?{\" \"}\r\n                <Link to=\"/recovery\" style={{ textDecoration: \"none\" }}>\r\n                  Recuperar contraseña\r\n                </Link>\r\n              </p>\r\n            </Form>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default LoginForm;\r\n"],"names":["setIsLogged","useAuth","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","email","setEmail","_useState3","_useState4","password","setPassword","_useState5","_useState6","successMessage","setSuccessMessage","_useState7","_useState8","errorMessage","setErrorMessage","_useState9","_useState10","formErrors","setFormErrors","validateForm","errors","Object","keys","length","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","loginForm","response","wrap","_context","prev","next","preventDefault","Login","sent","localStorage","setItem","token","userId","veri","emailToken","t0","stop","_x","apply","arguments","_jsx","Layout","title","children","Container","Row","className","_jsxs","Col","md","Alert","variant","Form","onSubmit","encType","Group","controlId","Label","Control","type","placeholder","value","onChange","target","Text","Button","Link","to","style","textDecoration"],"sourceRoot":""}